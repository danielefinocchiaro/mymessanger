generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//POSSIBLE STATE OF A USER
enum UserState {
  Online
  Offline
  Inactive //DOES NOT CONFIRM EMAIL
}

enum MessageState {
  Unread
  Read
  Pending
}

//USER OF THE WEB APP
model User {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  firstName    String
  lastName     String
  nickName     String?
  email        String         @unique
  password     Password?
  token        String?
  tokenExpires DateTime?
  state        UserState      @default(Inactive)
  imagePicture String?
  banned       Boolean        @default(false)
  Subscription Subscription[]
}

//HASED PASSWORD OF EVERY USER
model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

//SUBSCRIPTION OF USER TO A CHAT
model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

//CHAT
model Chat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  image     String?

  messages     Message[]
  Subscription Subscription[]
}

//MESSAGE OF THE CHAT
model Message {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  state     MessageState
  Chat      Chat?        @relation(fields: [chatId], references: [id])
  chatId    String?
}
